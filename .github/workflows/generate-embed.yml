# @format

name: Generate Embed Preview

on:
    push:
        branches: ["main"]
        paths:
            - "index.html"
            - "style.css"
            - ".github/workflows/generate-embed.yml"
    workflow_dispatch:

permissions:
    contents: write
    pages: write
    id-token: write

jobs:
    generate-embed:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Create package.json
              run: |
                  cat > package.json << 'EOF'
                  {
                    "name": "embed-generator",
                    "version": "1.0.0",
                    "type": "module",
                    "dependencies": {
                      "playwright": "^1.40.0"
                    }
                  }
                  EOF

            - name: Install dependencies
              run: |
                  bun install
                  bunx playwright install --with-deps chromium

            - name: Create embed generator script
              run: |
                  cat > generate-embed.js << 'EOF'
                  import { chromium } from 'playwright';
                  import { writeFileSync, readFileSync } from 'fs';

                  async function generateEmbedPreview() {
                    const browser = await chromium.launch();
                    const page = await browser.newPage();

                    await page.setViewportSize({ width: 1200, height: 630 });

                    let projectCount = 1;
                    try {
                      const htmlContent = readFileSync('index.html', 'utf8');
                      const projectMatches = htmlContent.match(/<article class="project-card">/g);
                      projectCount = projectMatches ? projectMatches.length : 1;
                    } catch (e) {
                      console.log('Could not read index.html, using default project count');
                    }

                    const embedHTML = `
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                      <meta charset="UTF-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <style>
                        @import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500;600&display=swap');

                        * {
                          margin: 0;
                          padding: 0;
                          box-sizing: border-box;
                        }

                        body {
                          font-family: 'JetBrains Mono', monospace;
                          background: #000000;
                          color: #00ff41;
                          display: flex;
                          align-items: center;
                          justify-content: center;
                          height: 100vh;
                          overflow: hidden;
                          position: relative;
                        }

                        .grid-bg {
                          position: absolute;
                          top: 0;
                          left: 0;
                          width: 100%;
                          height: 100%;
                          opacity: 0.1;
                          background-image:
                            linear-gradient(rgba(0, 255, 65, 0.1) 1px, transparent 1px),
                            linear-gradient(90deg, rgba(0, 255, 65, 0.1) 1px, transparent 1px);
                          background-size: 40px 40px;
                        }

                        .container {
                          text-align: center;
                          z-index: 1;
                          display: grid;
                          grid-template-columns: 1fr auto 1fr;
                          align-items: center;
                          gap: 60px;
                          width: 100%;
                          max-width: 1000px;
                          padding: 40px;
                        }

                        .brand {
                          font-size: 4rem;
                          font-weight: 600;
                          text-shadow: 0 0 20px #00ff41;
                          letter-spacing: -2px;
                          grid-column: 2;
                        }

                        .stats {
                          display: flex;
                          flex-direction: column;
                          align-items: center;
                          gap: 20px;
                          grid-column: 1;
                        }

                        .stat-item {
                          display: flex;
                          flex-direction: column;
                          align-items: center;
                          padding: 20px;
                          border: 1px solid rgba(0, 255, 65, 0.3);
                          border-radius: 8px;
                          background: rgba(0, 255, 65, 0.05);
                          min-width: 120px;
                        }

                        .stat-number {
                          font-size: 2.5rem;
                          font-weight: 600;
                          color: #ffffff;
                        }

                        .stat-label {
                          font-size: 0.9rem;
                          opacity: 0.7;
                          text-transform: lowercase;
                        }

                        .info {
                          display: flex;
                          flex-direction: column;
                          align-items: center;
                          gap: 20px;
                          grid-column: 3;
                        }

                        .role {
                          font-size: 1.8rem;
                          font-weight: 400;
                          opacity: 0.9;
                        }

                        .domain {
                          font-size: 1rem;
                          opacity: 0.6;
                          padding: 8px 16px;
                          border: 1px solid rgba(0, 255, 65, 0.3);
                          border-radius: 4px;
                        }

                        .terminal-cursor {
                          display: inline-block;
                          width: 2px;
                          height: 1.2em;
                          background: #00ff41;
                          animation: blink 1s infinite;
                          margin-left: 2px;
                        }

                        @keyframes blink {
                          0%, 50% { opacity: 1; }
                          51%, 100% { opacity: 0; }
                        }
                      </style>
                    </head>
                    <body>
                      <div class="grid-bg"></div>
                      <div class="container">
                        <div class="stats">
                          <div class="stat-item">
                            <div class="stat-number">${projectCount}</div>
                            <div class="stat-label">projects</div>
                          </div>
                        </div>

                        <div class="brand">kthread<span class="terminal-cursor"></span></div>

                        <div class="info">
                          <div class="role">developer</div>
                          <div class="domain">kthread.dev</div>
                        </div>
                      </div>
                    </body>
                    </html>
                    `;

                    await page.setContent(embedHTML);
                    await page.waitForTimeout(3000);

                    const screenshot = await page.screenshot({
                      type: 'png',
                      fullPage: false
                    });

                    writeFileSync('embed-preview.png', screenshot);
                    await browser.close();
                    console.log('Embed preview generated successfully with', projectCount, 'projects!');
                  }

                  generateEmbedPreview().catch(console.error);
                  EOF
            - name: Generate embed preview
              run: bun run generate-embed.js

            - name: Check for changes
              id: verify-changed-files
              run: |
                  if git diff --quiet HEAD -- embed-preview.png; then
                    echo "changed=false" >> $GITHUB_OUTPUT
                  else
                    echo "changed=true" >> $GITHUB_OUTPUT
                  fi

            - name: Commit and push if changed
              if: steps.verify-changed-files.outputs.changed == 'true'
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add embed-preview.png
                  git commit -m "ðŸŽ¨ Update embed preview [skip ci]" || exit 0
                  git push

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: embed-preview
                  path: embed-preview.png
                  retention-days: 30
